<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
using Microsoft.AspNetCore.SignalR.Client;

namespace <#= NameSpace #>
{
    public partial class <#= TargetTypeName #> : TypedSignalR.Client.IHubClient<<#= HubInterfaceName #>>, <#= ClientInterfaceName #>, System.IAsyncDisposable
    {
        protected class HubInvoker : <#= HubInterfaceName #>
        {
            private readonly HubConnection _connection;

            public HubInvoker(HubConnection connection)
            {
                _connection = connection;
            }
<# foreach(var method in HubMethods) { #>

            public <#= method.ReturnValueType #> <#= method.MethodName #>(<#= method.ArgParameterToString() #>)
            {
                return _connection.InvokeAsync<#= method.ReturnTypeGenericArgToString() #>(nameof(<#= method.MethodName #>) <#= method.ArgNameParametersToString() #>);
            }
<# } #>
        } // class HubInvoker

        public HubConnection Connection { get; }
        public <#= HubInterfaceName #> Hub { get; }
        public bool IsDisposed => _isDisposed != 0;

        protected int _isDisposed = 0;
        protected readonly System.Collections.Generic.List<System.IDisposable> _disposableList = new();

        public <#= TargetTypeName #>(HubConnection connection)
        {
            Connection = connection;
            Hub = new HubInvoker(connection);

            Connection.Closed += OnClosed;
            Connection.Reconnected += OnReconnected;
            Connection.Reconnecting += OnReconnecting;

<# foreach(var method in ClientMethods) { #>
            _disposableList.Add(Connection.On<#= method.ArgTypeParametersToString() #>(nameof(<#= method.MethodName #>), <#= method.MethodName #>));
<# } #>
        }

<# foreach(var method in ClientMethods) { #>
        public virtual System.Threading.Tasks.Task <#= method.MethodName #>(<#= method.ArgParameterToString() #>)
            => System.Threading.Tasks.Task.CompletedTask;

<# } #>
        public virtual System.Threading.Tasks.Task OnClosed(System.Exception e) => System.Threading.Tasks.Task.CompletedTask;

        public virtual System.Threading.Tasks.Task OnReconnected(string connectionId) => System.Threading.Tasks.Task.CompletedTask;

        public virtual System.Threading.Tasks.Task OnReconnecting(System.Exception e) => System.Threading.Tasks.Task.CompletedTask;

        public async System.Threading.Tasks.ValueTask DisposeAsync()
        {
            if(System.Threading.Interlocked.Increment(ref _isDisposed) == 1)
            {
                Connection.Closed -= OnClosed;
                Connection.Reconnected -= OnReconnected;
                Connection.Reconnecting -= OnReconnecting;
            
                await Connection.DisposeAsync();

                foreach(var d in _disposableList)
                {
                    d.Dispose();
                }

                _disposableList.Clear();
            }
        }
    } // class <#= TargetTypeName #>
} // namespace