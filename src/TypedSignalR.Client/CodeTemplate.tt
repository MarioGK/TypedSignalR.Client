<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY ...
// </auto-generated>
using Microsoft.AspNetCore.SignalR.Client;

namespace <#= NameSpace #>
{
    public partial class  <#= TypeName #> : TypedSignalR.Client.IHubClient<<#= HubInterfaceName #>>, <#= ClientInterfaceName #>, System.IDisposable
    {
        private class HubInvoker : <#= HubInterfaceName #>
        {
            private readonly HubConnection _connection;

            public HubInvoker(HubConnection connection)
            {
                _connection = connection;
            }
<# foreach(var method in HubMethods) { #>

            public <#= method.ReturnValueType #> <#= method.MethodName #>(<#= method.ArgParameterToString() #>)
            {
                return _connection.InvokeAsync<#= method.ReturnTypeGenericArgToString() #>(nameof(<#= method.MethodName #>) <#= method.ArgNamesParameterToOneline() #>);
            }
<# } #>
        } // class HubInvoker

        public HubConnection Connection { get; }
        public <#= HubInterfaceName #> Hub { get; }

        private readonly CompositeDisposable _compositeDisposable = new CompositeDisposable();

        public <#= TypeName #>(HubConnection connection)
        {
            Connection = connection;
            Hub = new HubInvoker(connection);
<# foreach(var method in ClientMethods) { #>
            _compositeDisposable.Add(Connection.On<#= method.ArgTypesParameterToOneline() #>(nameof(<#= method.MethodName #>), <#= method.MethodName #>));
<# } #>
        }

<# foreach(var method in ClientMethods) { #>
        public virtual <#= method.ReturnValueType #> <#= method.MethodName #>(<#= method.ArgParameterToString() #>)
        {
            <#= method.ReturnStatement() #>
        }

<# } #>
        public void Dispose()
        {
            _compositeDisposable.Dispose();
        }

        private sealed class CompositeDisposable : System.IDisposable
        {
            private System.Collections.Generic.List<System.IDisposable> _disposables = new ();

            private object _lock = new object();

            public void Add(System.IDisposable disposable)
            {
                lock (_lock)
                {
                    _disposables.Add(disposable);
                }
            }

            public void Dispose()
            {
                lock (_lock)
                {
                    foreach (var it in _disposables)
                    {
                        it.Dispose();
                    }
                    _disposables.Clear();
                }
            }
        } // class CompositeDisposable
    } // class <#= TypeName #>
} // namespace