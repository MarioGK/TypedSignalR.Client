<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
namespace TypedSignalR.Client
{
    public static partial class Extensions
    {
<# foreach(var hubProxyType in HubProxyTypeList) {#>
        private class HubInvokerFor<#= hubProxyType.CollisionFreeName #> : <#= hubProxyType.InterfaceFullName  #>
        {
            private readonly Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;
            private readonly System.Threading.CancellationToken _cancellationToken;

            public HubInvokerFor<#= hubProxyType.CollisionFreeName #>(Microsoft.AspNetCore.SignalR.Client.HubConnection connection, System.Threading.CancellationToken cancellationToken)
            {
                _connection = connection;
                _cancellationToken = cancellationToken;
            }
<# foreach(var method in hubProxyType.Methods) { #>

            public <#= method.ReturnType #> <#= method.MethodName #>(<#= method.GenerateArgParameterString() #>)
            {
                return Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync<#= method.GenerateGenericReturnTypeArgString() #>(_connection, nameof(<#= method.MethodName #>), <#= method.GenerateArgNamesStringForInvokeCoreAsync() #>, _cancellationToken);
            }
<# } #>
        }

<# } #>
<# foreach(var receiverType in ReceiverTypeList){ #>
        private static CompositeDisposable Bind<#= receiverType.CollisionFreeName #>(Microsoft.AspNetCore.SignalR.Client.HubConnection connection, <#= receiverType.InterfaceFullName #> receiver)
        {
            // It is not possible to avoid boxing.
            // This is a limitation caused by the SignalR implementation.
<# foreach(var method in receiverType.Methods) { #>
<# if (method.ReturnType == "void") {#>
            static System.Func<object[], System.Threading.Tasks.Task> ConvertToHandlerForm<#= method.MethodName #>(System.Action<#= method.GenerateTypeArgsFromParameterTypesString() #> method)
            {
                return args => 
                {
                    method(<#= method.GenerateCastedArgsString("args") #>);
                    return System.Threading.Tasks.Task.CompletedTask;
                };
            }
<# } else { #>
            static System.Func<object[], System.Threading.Tasks.Task> ConvertToHandlerForm<#= method.MethodName #>(System.Func<#= method.GenerateTypeArgsFromParameterTypesConcatenatedTaskString() #> method)
            {
                return args => method(<#= method.GenerateCastedArgsString("args") #>);
            }
<# } #>

<# } #>
            var compositeDisposable = new CompositeDisposable(<#= receiverType.Methods.Count + 1 #>);

<# foreach(var method in receiverType.Methods) { #>
            compositeDisposable.Add(Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.On(connection, nameof(receiver.<#= method.MethodName #>), <#= method.GenerateParameterTypeArrayString() #>, ConvertToHandlerForm<#= method.MethodName #>(receiver.<#= method.MethodName #>)));
<# } #>

            return compositeDisposable;
        }

<# } #>
        static Extensions()
        {
<# foreach(var hubProxyType in HubProxyTypeList) {#>
            HubInvokerConstructorCache<<#= hubProxyType.InterfaceFullName #>>.Construct = static (connection, cancellationToken) => new HubInvokerFor<#= hubProxyType.CollisionFreeName #>(connection, cancellationToken);
<# } #>

<# foreach(var receiverType in ReceiverTypeList){ #>
            ReceiverBinderCache<<#= receiverType.InterfaceFullName #>>.Bind = Bind<#= receiverType.CollisionFreeName #>;
<# } #>
        }
    }
}
