<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
#nullable enable
namespace TypedSignalR.Client
{
    public static partial class HubConnectionExtensions
    {
<# foreach(var hubProxyType in HubProxyTypeList) {#>
        private sealed class HubInvokerFor_<#= hubProxyType.CollisionFreeName #> : <#= hubProxyType.InterfaceFullName #>, IHubInvoker
        {
            private readonly global::Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;
            private readonly global::System.Threading.CancellationToken _cancellationToken;

            public HubInvokerFor_<#= hubProxyType.CollisionFreeName #>(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)
            {
                _connection = connection;
                _cancellationToken = cancellationToken;
            }
<# foreach(var method in hubProxyType.Methods) { #>

            public <#= method.ReturnType #> <#= method.MethodName #>(<#= method.CreateParametersString() #>)
            {
                return global::Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync<#= method.CreateGenericReturnTypeArgumentString() #>(_connection, nameof(<#= method.MethodName #>), <#= method.CreateArgumentsStringForInvokeCoreAsync() #>, _cancellationToken);
            }
<# } #>
        }

        private sealed class HubInvokerFactoryFor_<#= hubProxyType.CollisionFreeName #> : IHubInvokerFactory<<#= hubProxyType.InterfaceFullName #>>
        {
            public <#= hubProxyType.InterfaceFullName #> CreateHubInvoker(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)
            {
                return new HubInvokerFor_<#= hubProxyType.CollisionFreeName #>(connection, cancellationToken);
            }
        }

<# } #>
<# foreach(var receiverType in ReceiverTypeList){ #>
        private sealed class BinderFor_<#= receiverType.CollisionFreeName #> : IReceiverBinder<<#= receiverType.InterfaceFullName #>>
        {
            public global::System.IDisposable Bind(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, <#= receiverType.InterfaceFullName #> receiver)
            {
                var compositeDisposable = new CompositeDisposable(<#= receiverType.Methods.Count #>);

<# foreach(var method in receiverType.Methods) { #>
                compositeDisposable.Add(global::Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.On(connection, nameof(receiver.<#= method.MethodName #>), <#= method.CreateParameterTypeArrayString() #>, HandlerConverter.Convert<#= method.CreateTypeArgumentsStringFromParameterTypes() #>(receiver.<#= method.MethodName #>)));
<# } #>

                return compositeDisposable;
            }
        }

<# } #>
#if NET5_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNull("Factories")]
#endif
        private static partial void InitializeFactories()
        {
            if (Factories is null)
            {
                var factories = new global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory>();

<# foreach(var hubProxyType in HubProxyTypeList) {#>
                factories.Add(typeof(<#= hubProxyType.InterfaceFullName #>), new HubInvokerFactoryFor_<#= hubProxyType.CollisionFreeName #>());
<# } #>

                global::System.Threading.Interlocked.CompareExchange(ref Factories, factories, null);
            }
        }

#if NET5_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNull("Binders")]
#endif
        private static partial void InitializeBinders()
        {
            if (Binders is null)
            {
                var binders = new global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder>();

<# foreach(var receiverType in ReceiverTypeList){ #>
                binders.Add(typeof(<#= receiverType.InterfaceFullName #>), new BinderFor_<#= receiverType.CollisionFreeName #>());
<# } #>

                global::System.Threading.Interlocked.CompareExchange(ref Binders, binders, null);
            }
        }

        static HubConnectionExtensions()
        {
            InitializeFactories();
            InitializeBinders();
        }
    }
}
