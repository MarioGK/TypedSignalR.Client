<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
#nullable enable
namespace TypedSignalR.Client
{
    public static partial class HubConnectionExtensions
    {
<# foreach(var receiverType in ReceiverTypes){ #>
        private sealed class BinderFor_<#= receiverType.CollisionFreeName #> : IReceiverBinder<<#= receiverType.InterfaceFullName #>>
        {
            public global::System.IDisposable Bind(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, <#= receiverType.InterfaceFullName #> receiver)
            {
                var compositeDisposable = new CompositeDisposable(<#= receiverType.Methods.Count #>);

<# foreach(var method in receiverType.Methods) { #>
                compositeDisposable.Add(global::Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.On(connection, nameof(receiver.<#= method.MethodName #>), <#= method.CreateParameterTypeArrayString() #>, HandlerConverter.Convert<#= method.CreateTypeArgumentsStringFromParameterTypes() #>(receiver.<#= method.MethodName #>)));
<# } #>

                return compositeDisposable;
            }
        }

<# } #>
#if NET5_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNull("Binders")]
#endif
        private static partial void InitializeBinders()
        {
            if (Binders is null)
            {
                var binders = new global::System.Collections.Generic.Dictionary<global::System.Type, IReceiverBinder>();

<# foreach(var receiverType in ReceiverTypes){ #>
                binders.Add(typeof(<#= receiverType.InterfaceFullName #>), new BinderFor_<#= receiverType.CollisionFreeName #>());
<# } #>

                global::System.Threading.Interlocked.CompareExchange(ref Binders, binders, null);
            }
        }
    }
}
