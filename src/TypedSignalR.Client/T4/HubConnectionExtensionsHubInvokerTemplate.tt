<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
#nullable enable
namespace TypedSignalR.Client
{
    public static partial class HubConnectionExtensions
    {
<# foreach(var hubType in HubTypes) {#>
        private sealed class HubInvokerFor_<#= hubType.CollisionFreeName #> : <#= hubType.InterfaceFullName #>, IHubInvoker
        {
            private readonly global::Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;
            private readonly global::System.Threading.CancellationToken _cancellationToken;

            public HubInvokerFor_<#= hubType.CollisionFreeName #>(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)
            {
                _connection = connection;
                _cancellationToken = cancellationToken;
            }
<# foreach(var method in hubType.Methods) { #>

            public <#= method.ReturnType #> <#= method.MethodName #>(<#= method.CreateParametersString() #>)
            {
                return global::Microsoft.AspNetCore.SignalR.Client.HubConnectionExtensions.InvokeCoreAsync<#= method.CreateGenericReturnTypeArgumentString() #>(_connection, nameof(<#= method.MethodName #>), <#= method.CreateArgumentsStringForInvokeCoreAsync() #>, _cancellationToken);
            }
<# } #>
        }

        private sealed class HubInvokerFactoryFor_<#= hubType.CollisionFreeName #> : IHubInvokerFactory<<#= hubType.InterfaceFullName #>>
        {
            public <#= hubType.InterfaceFullName #> CreateHubInvoker(global::Microsoft.AspNetCore.SignalR.Client.HubConnection connection, global::System.Threading.CancellationToken cancellationToken)
            {
                return new HubInvokerFor_<#= hubType.CollisionFreeName #>(connection, cancellationToken);
            }
        }

<# } #>
#if NET5_0_OR_GREATER
        [global::System.Diagnostics.CodeAnalysis.MemberNotNull("Factories")]
#endif
        private static partial void InitializeFactories()
        {
            if (Factories is null)
            {
                var factories = new global::System.Collections.Generic.Dictionary<global::System.Type, IHubInvokerFactory>();

<# foreach(var hubType in HubTypes) {#>
                factories.Add(typeof(<#= hubType.InterfaceFullName #>), new HubInvokerFactoryFor_<#= hubType.CollisionFreeName #>());
<# } #>

                global::System.Threading.Interlocked.CompareExchange(ref Factories, factories, null);
            }
        }
    }
}
