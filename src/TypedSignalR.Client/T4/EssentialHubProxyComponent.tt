<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
using System;
using System.Collections.Generic;

namespace TypedSignalR.Client
{
    public static partial class Ex
    {
        private static class HubInvokerConstructorCache<T>
        {
            public static Func<Microsoft.AspNetCore.SignalR.Client.HubConnection, T> Construct;
        }

        private static class ReceiverBinderCache<T>
        {
            public static Func<Microsoft.AspNetCore.SignalR.Client.HubConnection, T, IDisposable> Bind;
        }

        public static THub CreateHubProxy<THub>(this Microsoft.AspNetCore.SignalR.Client.HubConnection source)
        {
            return HubInvokerConstructorCache<THub>.Construct(source);
        }

        public static (THub HubProxy, IDisposable Subscription) CreateHubProxyWith<THub, TClient>(this Microsoft.AspNetCore.SignalR.Client.HubConnection source, TClient receiver)
        {
            var hubProxy = HubInvokerConstructorCache<THub>.Construct(source);
            var subscription = ReceiverBinderCache<TClient>.Bind(source, receiver);
            return (hubProxy, subscription);
        }

        public static IDisposable Register<TClient>(this Microsoft.AspNetCore.SignalR.Client.HubConnection source, TClient receiver)
        {
            return ReceiverBinderCache<TClient>.Bind(source, receiver);
        }

        private sealed class CompositeDisposable : IDisposable
        {
            private readonly object _gate = new();
            private readonly List<IDisposable> _disposables;

            private bool _disposed;

            public CompositeDisposable()
            {
                _disposables = new List<IDisposable>();
            }

            public CompositeDisposable(int capacity)
            {
                _disposables = new List<IDisposable>(capacity < 0 ? 0 : capacity);
            }

            public void Add(IDisposable item)
            {
                var shouldDispose = false;

                lock (_gate)
                {
                    shouldDispose = _disposed;

                    if (!_disposed)
                    {
                        _disposables.Add(item);
                    }
                }

                if (shouldDispose)
                {
                    item.Dispose();
                }
            }

            public void Dispose()
            {
                var currentDisposables = default(IDisposable[]);

                lock (_gate)
                {
                    if (!_disposed)
                    {
                        _disposed = true;
                        currentDisposables = _disposables.ToArray();
                        _disposables.Clear();
                    }
                }

                if (currentDisposables is not null)
                {
                    foreach (var item in currentDisposables)
                    {
                        if (item is not null)
                        {
                            item.Dispose();
                        }
                    }
                }
            }
        }
    }
}