<#@ template language="C#" linePragmas="false" debug="false" hostspecific="false"#>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
// <auto-generated>
// THIS (.cs) FILE IS GENERATED BY TypedSignalR.Client
// </auto-generated>
using Microsoft.AspNetCore.SignalR.Client;

namespace TypedSignalR.Client
{
    public static partial class Ex
    {
<# foreach(var invoker in InvokerList) {#>
        private class HubInvokerFor<#= invoker.InterfaceName #> : <#= invoker.InterfaceFullName  #>
        {
            private readonly Microsoft.AspNetCore.SignalR.Client.HubConnection _connection;

            public HubInvokerFor<#= invoker.InterfaceName #>(Microsoft.AspNetCore.SignalR.Client.HubConnection connection)
            {
                _connection = connection;
            }
<# foreach(var method in invoker.HubMethods) { #>

            public <#= method.ReturnValueType #> <#= method.MethodName #>(<#= method.ArgParameterToString() #>)
            {
                return _connection.InvokeAsync<#= method.ReturnTypeGenericArgToString() #>(nameof(<#= method.MethodName #>)<#= method.ArgNameParametersToString() #>);
            }
<# } #>
        }

<# } #>
<# foreach(var receiver in ReceiverList){ #>
        public static void Connect<#= receiver.InterfaceName #>(Microsoft.AspNetCore.SignalR.Client.HubConnection connection, <#= receiver.InterfaceFullName #> receiver)
        {
<# foreach(var method in receiver.ClientMethods) { #>
            connection.On<#= method.ArgTypeParametersToString() #>(nameof(receiver.<#= method.MethodName #>),receiver.<#= method.MethodName #>);
<# } #>
        }

<# } #>
        static Ex()
        {
<# foreach(var invoker in InvokerList) {#>
            HubInvokerCache<<#= invoker.InterfaceFullName #>>.Construct = static connection => new HubInvokerFor<#= invoker.InterfaceName #>(connection);
<# } #>
<# foreach(var receiver in ReceiverList){ #>
            ClientBinderCache<<#= receiver.InterfaceFullName #>>.Bind = Connect<#= receiver.InterfaceName #>;
<# } #>
        }
    }
}